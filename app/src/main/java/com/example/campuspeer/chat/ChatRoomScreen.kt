package com.example.campuspeer.chat

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.AsyncImage
import com.example.campuspeer.model.PostItem
import com.example.campuspeer.model.UserData
import com.example.campuspeer.uicomponent.RatingDialog
import com.example.campuspeer.util.RatingUtils
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import java.text.NumberFormat
import java.util.Locale

@Composable
fun ChatRoomScreen(
    roomId: String,
    currentUserId: String,
    partnerId: String,
    itemId: String,
    viewModel: ChatViewModel = viewModel()
) {
    // 1) StateFlows Íµ¨ÎèÖ
    val messages   by viewModel.messages.collectAsState()
    val status     by viewModel.status.collectAsState()
    val currentItem by viewModel.currentItem.collectAsState()
    var partnerName by remember { mutableStateOf<String?>("Î°úÎî© Ï§ë‚Ä¶") }

    val sellerId = currentItem?.sellerId ?: ""
    val isSeller = sellerId.trim() == currentUserId.trim()

    // ÌèâÏ†ê Í∏∞Îä• Î≥ÄÏàò
    var showRatingDialog by remember { mutableStateOf(false) }
    var alreadyRated by remember { mutableStateOf(false) }

    println("ü™™ currentUserId = '$currentUserId'")
    println("üì¶ sellerId from item = '$sellerId'")
    println("üîç isSeller = $isSeller")

    // Í±∞Îûò ÏÉÅÌÉúÍ∞Ä ÏôÑÎ£åÎêòÎ©¥ Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
    LaunchedEffect(status) {
        if (status == "Í±∞ÎûòÏôÑÎ£å" && !alreadyRated) {
            showRatingDialog = true
        }
    }

    // 3) Î©îÏãúÏßÄ¬∑ÏÉÅÌÉú Î¶¨Ïä§ÎÑà
    LaunchedEffect(roomId) {
        viewModel.listenForMessage(roomId)
        viewModel.listenForTransactionStatus(roomId)

        // ÌèâÏ†ê Îß§Í∏∞Í∏∞ ÏôÑÎ£åÌñàÎäîÏßÄ ÌôïÏù∏
        val ref = Firebase.database
            .getReference("RatingsDone")
            .child(roomId)
            .child(currentUserId)

        ref.get().addOnSuccessListener { snapshot ->
            val done = snapshot.getValue(Boolean::class.java) ?: false
            alreadyRated = done
        }
    }
    // 4) ÏÉÅÌíà Ï†ïÎ≥¥ Î°úÎìú
    LaunchedEffect(itemId) {
        println("üßê fetchItemDetails Ìò∏Ï∂ú, itemId=$itemId")
        viewModel.fetchItemSummaryForChat(itemId)
    }
    // 3) ÌååÌä∏ÎÑà Ï†ïÎ≥¥ Î°úÎìú (Realtime DB ‚Üí Users/{uid})
    LaunchedEffect(partnerId) {
        Firebase
            .database
            .reference
            .child("Users")
            .child(partnerId)
            .get()
            .addOnSuccessListener { snapshot ->
                snapshot.getValue(UserData::class.java)?.let { user ->
                    // ÎãâÎÑ§ÏûÑÏù¥ ÎπÑÏñ¥ÏûàÏúºÎ©¥ studentNumber ÎòêÎäî email ÏïûÎ∂ÄÎ∂ÑÏúºÎ°ú ÎåÄÏ≤¥
                    partnerName = user.nickname
                        .takeIf { it.isNotBlank() }
                        ?: user.studentNumber
                            .takeIf { it.isNotBlank() }
                                ?: user.email
                            .substringBefore("@")
                } ?: run {
                    partnerName = "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê"
                }
            }
            .addOnFailureListener {
                partnerName = "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê"
            }
    }

    Column(modifier = Modifier.fillMaxSize()) {
        // ‚îÄ‚îÄ‚îÄ Ï±ÑÌåÖÎ∞© ÏµúÏÉÅÎã®: ÏÉÅÎåÄÎ∞© Ïù¥Î¶Ñ
        Text(
            text = partnerName ?: "Î°úÎî© Ï§ë‚Ä¶",
            style = MaterialTheme.typography.titleLarge,
            modifier = Modifier
                .fillMaxWidth()
                .background(Color(0xFFF5F5F5))
                .padding(horizontal = 16.dp, vertical = 8.dp)
        )
        // ‚îÄ‚îÄ‚îÄ ÏÉÅÌíà Ï†ïÎ≥¥ Ìó§Îçî (ÌåêÎß§ÏûêÎ©¥ ÏÉÅÌÉú ÎìúÎ°≠Îã§Ïö¥ÍπåÏßÄ)
        currentItem?.let { item ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color(0xFFF5F5F5))
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                ItemTransactionHeader(
                    item = item,
                    isSeller = isSeller,
                    status = status,
                    onStatusChange = { newStatus ->
                        viewModel.updateTransactionStatus(roomId, newStatus)
                    }
                )
            }
        }


        // ‚îÄ‚îÄ‚îÄ Î©îÏãúÏßÄ Î¶¨Ïä§Ìä∏
        LazyColumn(
            modifier = Modifier
                .weight(1f)
                .padding(horizontal = 8.dp),
            reverseLayout = true,
            contentPadding = PaddingValues(vertical = 8.dp)
        ) {
            itemsIndexed(messages.reversed()) { index, message ->
                val isMe = message.senderId == currentUserId
                val showAvatar = !isMe &&
                        (index == 0 || messages.reversed()[index - 1].senderId != message.senderId)

                ChatBubble(
                    message = message,
                    isMe = isMe,
                    showProfileImage = showAvatar
                )
                Spacer(modifier = Modifier.height(4.dp))
            }
        }

        // ‚îÄ‚îÄ‚îÄ Î©îÏãúÏßÄ ÏûÖÎ†•Ï∞Ω
        MessageInput { text ->
            viewModel.sendMessage(roomId, currentUserId, text)
        }
    }

    if (showRatingDialog) {
        RatingDialog(
            targetUserId = partnerId,
            onSubmit = { rating ->
                RatingUtils.updateUserRating(partnerId, rating) { success ->
                    if (success) {
                        RatingUtils.markRatingDone(roomId, currentUserId)
                        showRatingDialog = false
                        alreadyRated = true
                    }
                }
            },
            onDismiss = {
                showRatingDialog = false
            }
        )
    }
}

@Composable
fun ItemTransactionHeader(
    item: PostItem,
    isSeller: Boolean,
    status: String,
    onStatusChange: (String) -> Unit
) {
    Row(
        modifier = Modifier
            .clip(RoundedCornerShape(8.dp))
            .background(Color.White)
            .padding(8.dp)
            .fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        // ÏôºÏ™Ω: Ïù¥ÎØ∏ÏßÄ + ÌÖçÏä§Ìä∏
        Row(verticalAlignment = Alignment.CenterVertically) {
            AsyncImage(
                model = item.imageUrl,
                contentDescription = "ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ",
                modifier = Modifier
                    .size(60.dp)
                    .clip(RoundedCornerShape(8.dp)),
                contentScale = ContentScale.Crop
            )
            Spacer(Modifier.width(12.dp))
            Column {
                Text(item.title, fontSize = 16.sp, fontWeight = FontWeight.Bold)
                Spacer(Modifier.height(4.dp))
                Text(
                    "${NumberFormat.getNumberInstance(Locale.getDefault()).format(item.price)}Ïõê",
                    fontSize = 14.sp,
                    color = Color.Gray
                )
            }
        }

        Spacer(Modifier.width(16.dp))

        // Ïò§Î•∏Ï™Ω: Í±∞Îûò ÏÉÅÌÉú
        if (isSeller) {
            TransactionStatusDropdown(
                isSeller = true,
                currentStatus = status,
                onStatusChange = onStatusChange
            )
        } else {
            val statusColor = when (status) {
                "Í±∞ÎûòÍ∞ÄÎä•" -> Color(0xFF4CAF50)
                "ÏòàÏïΩÏ§ë" -> Color(0xFFFF9800)
                "Í±∞ÎûòÏôÑÎ£å" -> Color(0xFFF44336)
                else -> Color.Gray
            }

            Text(
                text = status,
                fontSize = 14.sp,
                color = statusColor,
                modifier = Modifier
                    .clip(RoundedCornerShape(8.dp))
                    .background(Color(0xFFF0F0F0))
                    .padding(horizontal = 12.dp, vertical = 6.dp)
            )
        }
    }
}

